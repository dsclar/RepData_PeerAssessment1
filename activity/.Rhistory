?matrix
?set
?set
?solve
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
avector= makeVector(c(1,2,3,4))
avector$get()
cachemean(avector)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(avector)
avector= makeVector(c(5,6,,7,8, 1,2,3,4))
cachemean(avector
cachemean(avector)
avector= makeVector(c(5,6,7,8, 1,2,3,4))
cachemean(avector)
inv=makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
makeCacheMatrix <- function(x = matrix()) {
inv=NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setsolve <- function(solve) inv <<- solve
getsolve <- function() inv
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
inv=makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
inv$get()
cacheSolve <- function(x, ...) {
inv <- x$getsolve()
if(!is.null(inv)) {
message("getting cached inverse matrix")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setsolve(inv)
inv
}
cacheSolve(inv)
inv$getsolve()
cacheSolve(inv)
inv$set(matrix(c(0, 5, 99, 66), nrow=2, ncol=2))
cacheSolve(inv)
inv$get()
inv$getsolve()
inv=makeCacheMatrix(matrix(c(1,2,3,4,5,6), nrow=2, ncol=3))
inv$get()  #Returns original matrix
cacheSolve(inv) #Computes, caches, and returns inverse matrix
cacheSolve(inv) #Computes, caches, and returns inverse matrix
inv=makeCacheMatrix(matrix(rnorm(100), nrow=10, ncol=10))
inv$get()  #Returns original matrix
cacheSolve(inv) #Computes, caches, and returns inverse matrix
inv$getsolve()  #Returns inverse matrix
cacheSolve(inv) #Returns previously computed cached inverse matrix.
inv$get()  #Returns original matrix
makeCacheMatrix <- function(x = matrix()) {
inv=NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setsolve <- function(solve) inv <<- solve
getsolve <- function() inv
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
inv=makeCacheMatrix(matrix(c(1,2,3,4,5,6), nrow=2, ncol=3))
inv$get()  #Returns original matrix
inv=makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
inv$get()  #Returns original matrix
cacheSolve(inv) #Computes, caches, and returns inverse matri
cacheSolve <- function(x, ...) {
inv <- x$getsolve()
if(!is.null(inv)) {
message("getting cached inverse matrix")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setsolve(inv)
inv
}
{
## Return a matrix that is the inverse of 'x'
}
inv$getsolve()  #Returns inverse matrix
cacheSolve(inv) #Returns previously computed cached inverse matrix.
inv$set(matrix(c(0, 5, 99, 66), nrow=2, ncol=2)) #Modifying existing matrix
cacheSolve(inv) #Computes, caches, and returns modified inverse matrix
inv$get()  #Returns original modified matrix
inv$getsolve()  #Returns inverse matrix of modified matrix
inv=makeCacheMatrix(matrix(rnorm(100), nrow=10, ncol=10)) #Test functions above with a larger square matrix.
inv$get()  #Returns original matrix
cacheSolve(inv) #Computes, caches, and returns inverse matrix
inv$getsolve()  #Returns inverse matrix
cacheSolve(inv) #Returns previously computed cached inverse matrix.
cacheSolve <- function(x, ...) {
inv <- x$getsolve()
if(!is.null(inv)) {
message("getting cached inverse matrix")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setsolve(inv)
inv
}
{
return(inv)
}
cacheSolve(inv) #Computes, caches, and returns inverse matrix
source("cachematrix.R")
inv=makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
inv$get()  #Returns original matrix
makeCacheMatrix <- function(x = matrix()) {
inv=NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setsolve <- function(solve) inv <<- solve
getsolve <- function() inv
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
inv <- x$getsolve()
if(!is.null(inv)) {
message("getting cached inverse matrix")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setsolve(inv)
inv
}
{
return(inv)
}
source("cachematrix.R")
inv=makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
inv$get()  #Returns original matrix
cacheSolve(inv) #Computes, caches, and returns inverse matrix
nv$getsolve()  #Returns inverse matrix
cacheSolve(inv) #Returns previously computed cached inverse matrix.
inv$set(matrix(c(0, 5, 99, 66), nrow=2, ncol=2)) #Modifying existing matrix
inv$get()  #Returns original matrix
cacheSolve(inv) #Computes, caches, and returns inverse matrix
inv$getsolve()  #Returns inverse matrix
cacheSolve(inv) #Returns previously computed cached inverse matrix.
inv=makeCacheMatrix(matrix(rnorm(100), nrow=10, ncol=10)) #Test functions above with a larger square matrix.
inv$get()  #Returns original matrix
cacheSolve(inv) #Computes, caches, and returns inverse matrix
inv$getsolve()  #Returns inverse matrix
cacheSolve(inv) #Returns previously computed cached inverse matrix.
source("cachematrix.R")
inv=makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
inv$get()  #Returns original matrix
cacheSolve(inv) #Computes, caches, and returns inverse matrix
inv$getsolve()  #Returns inverse matrix
cacheSolve(inv) #Returns previously computed cached inverse matrix.
set.seed(1)
rpois(5, 2)
library(swirl)
swirl()
quit
bye
info()
main()
num_vect=c(0,5,55,-10)
num_vect=c(0.5,55,-10,6)
num_vect=c(0.5,55,-10,6)
num_vect<-(0.5,55,-10,6)
num_vect<-c(0.5, 55, -10, 6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My", "name", "is")
my_char
paste(my_char, colapse= " ")
paste(my_char, collapse= " ")
c(my_char, "AC")
my_name<-c(my_char, "AC")
my_name
paste(my_name, collaose=" ")
paste(my_name, collapse=" ")
paste("Hello", "world", sep=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
targets[1]
targets=c("Pumpkin", "carrot", "Zucchini", "Yam", "Potato")
targets[1]
library(neuralnet)
install.packages("neuralnet")
library(neuralnet)
?neuralnet
?formula
?rbin
?rnorm
?rbinom
?runif
?bin
?binary
a=runif(10)
a
?rbinom
a=rbinom(10, 10, 0.5)
a
target_id=rbinom(100, 5, 0.5)
target_id
target_id=rbinom(100, 5, 1)
target_id
target_id=rbinom(100, 5, .6)
target_id
target_id=rbinom(100, 5, .5)
target_id
inputs=data.frame(green=c(0,1), Yellow=c(0,1), Orange=c(0,1), Small=c(0,1), Large=c(0,1), Long=(c(0,1))
inputs
inputs=data.frame(green=c(0,1), Yellow=c(0,1), Orange=c(0,1), Small=c(0,1), Large=c(0,1), Long=c(0,1))
inputs
?random
?rand
?rep
a=rbinom(10, 2, 0.5)
a=rbinom(10, 1, 0.5)
a=rbinom(100, 1, 0.5)
a
inputs=data.frame(Green=rbinom(100, 1, 0.5), Yellow=rbinom(100, 1, 0.5), Orange=rbinom(100, 1, 0.5), Small=rbinom(100, 1, 0.5), Large=rbinom(100, 1, 0.5), Long=rbinom(100, 1, 0.5))
inputs
Table_T=data.frame(Target_id= rbinom(100, 1, 0.5), Green=rbinom(100, 1, 0.5), Yellow=rbinom(100, 1, 0.5), Orange=rbinom(100, 1, 0.5), Small=rbinom(100, 1, 0.5), Large=rbinom(100, 1, 0.5), Long=rbinom(100, 1, 0.5))
Table_T
Table_T=data.frame(Target_id= rbinom(100, 5, 0.5), Green=rbinom(100, 1, 0.5), Yellow=rbinom(100, 1, 0.5), Orange=rbinom(100, 1, 0.5), Small=rbinom(100, 1, 0.5), Large=rbinom(100, 1, 0.5), Long=rbinom(100, 1, 0.5))
Table_T
Initial_weights=rnorm(30, mean=2.5, sd=1)
Initial_weights
Inputs<-rbind(rnorm(100,0,1),rnorm(100,0,1),rnorm(100,0,1))
Inputs<-rbind(seq(1,20,0.1),seq(1,20,0.1),seq(1,20,0.1))
Targets<-10+2*Inputs[1,]+3*Inputs[2,]+5*Inputs[3,]
Targets
NumInputs<-dim(Inputs)[1]
Inputs<-rbind(seq(1,20,0.1),seq(1,20,0.1),seq(1,20,0.1))
View(Inputs)
Targets=rbind(Pumpkin=c(0,1,1,0,0,1,0), Carrot=c(0,0,1,0,1,0,1), Zucchini=c(1,1,0,0,1,0,0),
Yam=c(0,0,1,0,1,1,0), Potato=c(0,0,0,1,0,1,0))
View(Targets)
class(Targets)
target_Name=c("Pumpkin"=1, "Carrot"=2, "Zucchini"=3, "Yam"=4, "Potato"=5)
Targets=c("Pumpkin"=1, "Carrot"=2, "Zucchini"=3, "Yam"=4, "Potato"=5)
Targets
View(Table_T)
Inputs=data.frame(Green=rbinom(100, 1, 0.5),
Yellow=rbinom(100, 1, 0.5), Orange=rbinom(100, 1, 0.5), Brown=rbinom(100, 1, 0.5), Small=rbinom(100, 1, 0.5),
Large=rbinom(100, 1, 0.5), Long=rbinom(100, 1, 0.5))
View(Inputs)
NumInputs<-dim(Inputs)[2]
Initial_weightsIH=rnorm(NumInputs*NumHidden, mean=2.5, sd=1)
Initial_weightsHO=rnorm(NumOutputs*NumHidden, mean=2.5, sd=1)
NumInputs<-dim(Inputs)[2]
NumHidden<-5
NumOutputs<-5
Initial_weightsIH=rnorm(NumInputs*NumHidden, mean=2.5, sd=1)
Initial_weightsHO=rnorm(NumOutputs*NumHidden, mean=2.5, sd=1)
HN=sum(Inputs[1,]*Initial_weightsIH)
HN1=sum(Inputs[1,]*Initial_weightsIH[1:7])
Initial_weightsIH[1:7]
HN2=sum(Inputs[1,]*Initial_weightsIH[8:14])
HN1=sum(Inputs[1,]*Initial_weightsIH[1:7])
HN2=sum(Inputs[1,]*Initial_weightsIH[8:14])
HN3=sum(Inputs[1,]*Initial_weightsIH[15:21])
HN4=sum(Inputs[1,]*Initial_weightsIH[22:28])
HN5=sum(Inputs[1,]*Initial_weightsIH[29:35])
sig(HN1)
sig=function(t){1/(1+exp(-t))}
sig(HN1)
HN1=sig(sum(Inputs[1,]*Initial_weightsIH[1:7]))
HN=c(HN1:HN5)
HN
HN=c(HN1, HN2, HN3, HN4, HN5)
HN=c(HN[1:5])
HN
ON1=sig(sum(HN*Initial_weightsHO[1:5]))
ON1=sig(sum(HN*Initial_weightsHO[1:5]))
ON2=sig(sum(HN*Initial_weightsHO[6:10]))
ON3=sig(sum(HN*Initial_weightsHO[11:15]))
ON4=sig(sum(HN*Initial_weightsHO[16:20]))
ON5=sig(sum(HN*Initial_weightsHO[21:25]))
ON1=sum(HN*Initial_weightsHO[1:5])
Initial_weightsIH=rnorm(NumInputs*NumHidden, mean=0, sd=1)
Initial_weightsHO=rnorm(NumOutputs*NumHidden, mean=0, sd=1)
HN1=sig(sum(Inputs[1,]*Initial_weightsIH[1:7]))
HN2=sig(sum(Inputs[1,]*Initial_weightsIH[8:14])
HN3=sig(sum(Inputs[1,]*Initial_weightsIH[15:21]))
HN4=sig(sum(Inputs[1,]*Initial_weightsIH[22:28]))
HN5=sig(sum(Inputs[1,]*Initial_weightsIH[29:35]))
HN=c(HN[1:5])
HN1=sig(sum(Inputs[1,]*Initial_weightsIH[1:7]))
HN2=sig(sum(Inputs[1,]*Initial_weightsIH[8:14]))
HN3=sig(sum(Inputs[1,]*Initial_weightsIH[15:21]))
HN4=sig(sum(Inputs[1,]*Initial_weightsIH[22:28]))
HN5=sig(sum(Inputs[1,]*Initial_weightsIH[29:35]))
HN=c(HN[1:5])
HN=c(HN[1:5])
HN
c(HN[1:5])
?extract_numeric
?extract-numeric
HN=c(HN1, HN2, HN3, HN4, HN5)
ON1=sum(HN*Initial_weightsHO[1:5])
ON1=sig(sum(HN*Initial_weightsHO[1:5]))
ON2=sig(sum(HN*Initial_weightsHO[6:10]))
ON3=sig(sum(HN*Initial_weightsHO[11:15]))
ON4=sig(sum(HN*Initial_weightsHO[16:20]))
ON5=sig(sum(HN*Initial_weightsHO[21:25]))
HNb=c([HN1:HN5])
HNb=c(HN1:HN5)
HNb=c(HN[1:5])
HN=c(HN[1:5])
HN
HN1=sig(sum(Inputs[1,]*Initial_weightsIH[1:7]))
HN2=sig(sum(Inputs[1,]*Initial_weightsIH[8:14]))
HN3=sig(sum(Inputs[1,]*Initial_weightsIH[15:21]))
HN4=sig(sum(Inputs[1,]*Initial_weightsIH[22:28]))
HN5=sig(sum(Inputs[1,]*Initial_weightsIH[29:35]))
HN=c(HN[1:5])
ON1=sig(sum(HN*Initial_weightsHO[1:5]))
ON2=sig(sum(HN*Initial_weightsHO[6:10]))
ON3=sig(sum(HN*Initial_weightsHO[11:15]))
ON4=sig(sum(HN*Initial_weightsHO[16:20]))
ON5=sig(sum(HN*Initial_weightsHO[21:25]))
sig(Targets)
Sig_Targets=sig(Targets)
OE1=(Sig_Targets[1]-ON1)*(1-ON1)*ON1
OE1=(Sig_Targets[1]-ON1)#*(1-ON1)*ON1
OE1=(Sig_Targets[1]-ON1)*(1-ON1)*ON1
OE2=(Sig_Targets[2]-ON2)*(1-ON2)*ON2
OE3=(Sig_Targets[3]-ON3)*(1-ON3)*ON3
OE4=(Sig_Targets[4]-ON4)*(1-ON4)*ON4
OE5=(Sig_Targets[5]-ON5)*(1-ON5)*ON5
IW_IH=rnorm(NumInputs*NumHidden, mean=0, sd=1) # from input to hiden layer
IW_HO=rnorm(NumOutputs*NumHidden, mean=0, sd=1) # from hidden to output layer
HN1=sig(sum(Inputs[1,]*IW_IH[1:7]))
HN2=sig(sum(Inputs[1,]*IW_IH[8:14]))
HN3=sig(sum(Inputs[1,]*IW_IH[15:21]))
HN4=sig(sum(Inputs[1,]*IW_IH[22:28]))
HN5=sig(sum(Inputs[1,]*IW_IH[29:35]))
HN=c(HN[1:5])
HN=c(HN[1:5])
HN=c(HN1, HN2, HN3, HN4, HN5)
ON1=sig(sum(HN*IW_HO[1:5]))
ON2=sig(sum(HN*IW_HO[6:10]))
ON3=sig(sum(HN*IW_HO[11:15]))
ON4=sig(sum(HN*IW_HO[16:20]))
ON5=sig(sum(HN*IW_HO[21:25]))
Sig_Targets=sig(Targets)
OE1=(Sig_Targets[1]-ON1)*(1-ON1)*ON1
OE2=(Sig_Targets[2]-ON2)*(1-ON2)*ON2
OE3=(Sig_Targets[3]-ON3)*(1-ON3)*ON3
OE4=(Sig_Targets[4]-ON4)*(1-ON4)*ON4
OE5=(Sig_Targets[5]-ON5)*(1-ON5)*ON5
NewWeightsON1-HN1= IW_HO[1]+(OE1*HN1)
#Backpropagation of error
NewWeightsON1_HN1= IW_HO[1]+(OE1*HN1)
setwd("C:/Users/Anne-Catherine/Documents/Reproducible Research/RepData_PeerAssessment1/activity")
activity=read.csv("activity.csv")
library(dplyr)
library(ggplot2)
act_sum=summarize(group_by(activity, date), sum=sum(steps, na.rm=TRUE))
g=ggplot(act_sum, aes(c(date), sum))
g+geom_bar(stat="identity", width=0.5)+ylim(0.00, 21200.00)+
labs(x="Days from October 1st to November 30, 2012")+labs(y="Frequency of steps")+labs(title="Total number of steps taken each day in October & November 2012")
activity$interval=factor(activity$interval)
act_int=summarize(group_by(activity, interval), mean=mean(steps, na.rm=TRUE))
p=ggplot(act_int, aes(c(1:288), mean))
p+geom_line(linetype=1)+labs(x="5-minute Interval", y="Average number of steps across all days")+labs(title="Average Daily Activity Pattern")
#qplot(x=c(1:288), mean, data=act_int, geom="line")
#plot(act_int$interval, act_int$mean, type="l", main="Average Daily Activity Pattern", xlab="5-minute Interval", ylab="Average number of steps across all days")
max_mean=act_int[act_int$mean==max(act_int$mean),]
max_int=max_mean[1,1]
mva=sum(is.na(activity$steps))
ibrary(data.table)
activity=data.table(activity)
activity$interval=as.character(activity$interval)
act_int=data.table(act_int)
act_int$interval=as.character(act_int$interval)
merge_act=merge(activity, act_int, by="interval")
merge_act$steps[is.na(merge_act$steps)]= merge_act$mean[is.na(merge_act$steps)]
library(data.table)
activity=data.table(activity)
activity$interval=as.character(activity$interval)
act_int=data.table(act_int)
act_int$interval=as.character(act_int$interval)
merge_act=merge(activity, act_int, by="interval")
merge_act$steps[is.na(merge_act$steps)]= merge_act$mean[is.na(merge_act$steps)]
new_activity=select(merge_act, -(mean))
new_activity$interval=factor(new_activity$interval)
new_act_sum=summarize(group_by(new_activity, date), sum=sum(steps))
g=ggplot(new_act_sum, aes(c(date), sum))
g+geom_bar(stat="identity", width=0.5)+ylim(0.00, 21200.00)+
labs(x="Days from October 1st to November 30, 2012")+labs(y="Frequency of steps")+labs(title="Total number of steps taken each day in October & November 2012")
new_mean=mean(new_act_sum$sum)
new_median=median(new_act_sum$sum)
library(lubridate)
activity_diff=mutate(new_activity, weekdays=wday(as.Date(as.character(date)), label=TRUE, abbr=FALSE))
activity_diff$weekdays= as.character(activity_diff$weekdays)
activity_diff$weekdays[activity_diff$weekday %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")]="Weekday"
activity_diff$weekdays[activity_diff$weekday %in% c("Saturday", "Sunday")]="Weekend"
activity_diff$weekdays= factor(activity_diff$weekdays)
act_diff_by=group_by(activity_diff, interval, weekdays)
act_diff_sum=summarize(act_diff_by, mean=mean(steps))
w=ggplot(act_diff_sum, aes(c(1:576), mean))
w+geom_line(colour= "blue")+facet_wrap(~weekdays, ncol=1)+
labs(x="Interval")+labs(y="Number of steps")+labs(title="Comparison of Daily Activity Pattern between Weekday and Weekend")+theme_bw()+theme(strip.background=element_rect(fill="yellow"))+theme(panel.grid=element_blank())
act_diff_by=group_by(activity_diff, interval, weekdays)
act_diff_sum=summarize(act_diff_by, mean=mean(steps))
act_diff_sum$interval=as.numeric(act_diff_sum$interval)
w=ggplot(act_diff_sum, aes(interval, mean))
w+geom_line(colour= "blue")+facet_wrap(~weekdays, ncol=1)+
labs(x="Interval")+labs(y="Number of steps")+labs(title="Comparison of Daily Activity Pattern between Weekday and Weekend")+theme_bw()+theme(strip.background=element_rect(fill="yellow"))+theme(panel.grid=element_blank())
act_diff_by=group_by(activity_diff, interval, weekdays)
act_diff_sum=summarize(act_diff_by, mean=mean(steps))
act_diff_sum$interval=as.numeric(act_diff_sum$interval)
w=ggplot(act_diff_sum, aes(interval, mean))
w+geom_line(colour= "blue")+facet_wrap(~weekdays, ncol=1)+
labs(x="Interval")+labs(y="Number of steps")+labs(title="Comparison of Daily Activity Pattern between Weekday and Weekend")+theme_bw()+theme(strip.background=element_rect(fill="yellow"))+theme(panel.grid=element_blank())
activity$interval=factor(activity$interval)
act_int=summarize(group_by(activity, interval), mean=mean(steps, na.rm=TRUE))
p=ggplot(act_int, aes(c(1:288), mean))
p+geom_line(linetype=1)+labs(x="5-minute Interval", y="Average number of steps across all days")+labs(title="Average Daily Activity Pattern")
?Sys.setlocale()
?hms
c=seq(0, 1155, by=5)
c
act_int_n= mutate(act_int, interval1=c(seq(0, 1155, by=5)))
View(act_int_n)
act_int$interval= as.character(as.numeric(act_int$interval)
act_int$interval= as.character(as.numeric(act_int$interval))
act_int$interval= as.character(as.numeric(act_int$interval))
View(act_int)
act_int$interval= as.character(act_int$interval)
activity$interval=factor(activity$interval)
act_int=summarize(group_by(activity, interval), mean=mean(steps, na.rm=TRUE))
activity$interval=factor(activity$interval)
act_int=summarize(group_by(activity, interval), mean=mean(steps, na.rm=TRUE))
act_int$interval= as.character(act_int$interval)
p=ggplot(act_int, aes(interval, mean))
p=ggplot(act_int, aes(interval, mean))
p+geom_line(linetype=1)+labs(x="5-minute Interval", y="Average number of steps across all days")+labs(title="Average Daily Activity Pattern")
act_int$interval= as.numeric(act_int$interval
act_int$interval= as.numeric(act_int$interval)
act_int$interval= as.numeric(act_int$interval)
p=ggplot(act_int, aes(interval, mean))
p+geom_line(linetype=1)+labs(x="5-minute Interval", y="Average number of steps across all days")+labs(title="Average Daily Activity Pattern")
activity$interval=factor(activity$interval)
act_int=summarize(group_by(activity, interval), mean=mean(steps, na.rm=TRUE))
act_int$interval= as.character(act_int$interval)
act_int$interval= as.numeric(act_int$interval)
p=ggplot(act_int, aes(interval, mean))
p+geom_line(linetype=1)+labs(x="5-minute Interval", y="Average number of steps across all days")+labs(title="Average Daily Activity Pattern")
#qplot(x=c(1:288), mean, data=act_int, geom="line")
#plot(act_int$interval, act_int$mean, type="l", main="Average Daily Activity Pattern", xlab="5-minute Interval", ylab="Average number of steps across all days")
activity$interval=factor(activity$interval)
act_int=summarize(group_by(activity, interval), mean=mean(steps, na.rm=TRUE))
act_int$interval= as.character(act_int$interval)
act_int$interval= as.numeric(act_int$interval)
p=ggplot(act_int, aes(interval, mean))
p+geom_line(linetype=1)+labs(x="5-minute Interval", y="Average number of steps across all days")+labs(title="Average Daily Activity Pattern")
act_diff_by=group_by(activity_diff, interval, weekdays)
act_diff_sum=summarize(act_diff_by, mean=mean(steps))
act_diff_sum$interval=as.character(act_diff_sum$interval)
act_diff_sum$interval=as.numeric(act_diff_sum$interval)
w=ggplot(act_diff_sum, aes(interval, mean))
w+geom_line(colour= "blue")+facet_wrap(~weekdays, ncol=1)+
labs(x="Interval")+labs(y="Number of steps")+labs(title="Comparison of Daily Activity Pattern between Weekday and Weekend")+theme_bw()+theme(strip.background=element_rect(fill="yellow"))+theme(panel.grid=element_blank())
act_sum$date=as.character(act_sum$date)
g=ggplot(act_sum, aes(c(date), sum))
g+geom_bar(stat="identity", width=0.5)+ylim(0.00, 21200.00)+
labs(x="Days from October 1st to November 30, 2012")+labs(y="Frequency of steps")+labs(title="Total number of steps taken each day in October & November 2012")
act_sum=summarize(group_by(activity, date), sum=sum(steps, na.rm=TRUE))
g=ggplot(act_sum, aes(c(date), sum))
g+geom_bar(stat="identity", width=0.5)+ylim(0.00, 21200.00)+
labs(x="Days from October 1st to November 30, 2012")+labs(y="Frequency of steps")+labs(title="Total number of steps taken each day in October & November 2012")
